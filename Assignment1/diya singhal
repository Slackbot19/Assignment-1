
PROBLEM 1 CODE

#include <iostream>
using namespace std;
 
int main () {
   int n;
    cin>>n;
    cout<<"\n";
    int m=(2*n);
    int pair[m][n];
    //inputting the preferences of men and women respectively
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>pair[i][j];
        }
        cout<<"\n";
    }
    int r[4][4],com;
    int p=0,q=0;
    //forming two arrays respectively having preferences of women and men
    //array a has preferences of men (ie women) and array b has preferences of women(ie men)
  int a[n][n],b[n][n];
  for(int i=0;i<n;i++)
  {
      for(int j=0;j<n;j++)
      {
          a[i][j]=pair[i][j];
      }
  }
   for(int i=n;i<(2*n);i++)
  {
      for(int j=0;j<n;j++)
      {
          b[i-n][j]=pair[i][j];
      }
  }
  //forming stable marriage pairs
  for(int j=0;j<n;j++)
  {
      for(int i=0;i<n;i++)
      {
          com=a[i][0];
          if((a[i][0]==com)&&(b[com-n][j]==i))
          {
              r[p][q]=com;
              r[p][q+1]=i;
              p=p+1;
              q=0;
          }
          
      }
  }
  for(int i=0;i<4;i++)
  {
      for(int j=0;j<4;j++)
      {
          cout<<r[i][j];
      }
      cout<<"\n";
  }
     
   return 0;
}


PROBLEM 2 CODE
#include<stdio.h> 
#include<stdlib.h> 
  
/* Representation of a box */
struct Box 
{ 
  // h --> height, w --> width, d --> depth 
  int h, w, d; 
}; 
int min (int x, int y) 
{ return (x < y)? x : y; } 
int max (int x, int y) 
{ return (x > y)? x : y; } 
  
/* SORTING THE BOXES IN DECREASING ORDER */
int compare (const void *a, const void * b) 
{ 
    return ( (*(Box *)b).d * (*(Box *)b).w ) - 
           ( (*(Box *)a).d * (*(Box *)a).w ); 
} 
  
/* Returns the height of the tallest stack that can be 
   formed with give type of boxes */
int maxStackHeight( Box arr[], int n ) 
{ 
   Box rot[3*n]; 
   int index = 0; 
   for (int i = 0; i < n; i++) 
   { 
      // Copy the original box 
      rot[index].h = arr[i].h; 
      rot[index].d = max(arr[i].d, arr[i].w); 
      rot[index].w = min(arr[i].d, arr[i].w); 
      index++; 
  
      // First rotation of box 
      rot[index].h = arr[i].w; 
      rot[index].d = max(arr[i].h, arr[i].d); 
      rot[index].w = min(arr[i].h, arr[i].d); 
      index++; 
  
      // Second rotation of box 
      rot[index].h = arr[i].d; 
      rot[index].d = max(arr[i].h, arr[i].w); 
      rot[index].w = min(arr[i].h, arr[i].w); 
      index++; 
   } 
  
   // Now the number of boxes is 3n 
   n = 3*n; 
  
   /* Sort the array 'rot[]' in non-increasing order 
      of base area */
   qsort (rot, n, sizeof(rot[0]), compare); 
   for (int i = 0; i < n; i++ ) 
   printf("%d x %d x %d\n", rot[i].h, rot[i].w, rot[i].d);
   int msh[n]; 
   for (int i = 0; i < n; i++ ) 
      msh[i] = rot[i].h; 
  
   /* Compute optimized msh values in bottom up manner */
   for (int i = 1; i < n; i++ ) 
      for (int j = 0; j < i; j++ ) 
         if ( rot[i].w < rot[j].w && 
              rot[i].d < rot[j].d && 
              msh[i] < msh[j] + rot[i].h 
            ) 
         { 
              msh[i] = msh[j] + rot[i].h; 
         } 
  
  
   /* Pick maximum of all msh values */
   int max = -1; 
   for ( int i = 0; i < n; i++ ) 
      if ( max < msh[i] ) 
         max = msh[i]; 
  
   return max; 
} 
int main() 
{ 
  Box arr[] = { {4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32} }; 
  int n = sizeof(arr)/sizeof(arr[0]); 
  
  printf("The maximum possible height of stack is %d\n", 
         maxStackHeight (arr, n) ); 
  
  return 0; 
} 
